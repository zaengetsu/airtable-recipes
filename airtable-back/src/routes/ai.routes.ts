import express from 'express';
import { authenticate } from '../middleware/auth.middleware';
import { recipeService } from '../services/recipe.service';
import { ingredientService } from '../services/ingredient.service';
import { userService } from '../services/user.service';
import { nutritionalAnalysisService } from '../services/nutritionalAnalysis.service';
import { GroqService } from '../lib/groq.service';

const router = express.Router();
const groqService = new GroqService();

// Fonction utilitaire pour formater une recette avec du markdown esth√©tique
function formatRecipeWithMarkdown(recipeData: any): string {
  const difficultyEmoji = {
    'Facile': 'üü¢',
    'Moyen': 'üü°',
    'Difficile': 'üî¥'
  };

  const categoryEmoji = {
    'Plat principal': 'üçΩÔ∏è',
    'Entr√©e': 'ü•ó',
    'Dessert': 'üç∞',
    'Petit d√©jeuner': 'ü•ê',
    'Go√ªter': 'üç™',
    'Ap√©ritif': 'ü•Ç',
    'Soupe': 'üç≤',
    'Salade': 'ü•ó',
    'P√¢tes': 'üçù',
    'Pizza': 'üçï',
    'Burger': 'üçî',
    'Sushi': 'üç£',
    'Tarte': 'ü•ß',
    'G√¢teau': 'üéÇ'
  };

  const timeEmoji = '‚è±Ô∏è';
  const servingsEmoji = 'üë•';
  const ingredientsEmoji = 'ü•ò';
  const instructionsEmoji = 'üìù';

  const title = `## üéØ **${recipeData.name}**`;
  const description = `*${recipeData.description}*`;

  const ingredients = recipeData.ingredients.map((ing: any) =>
    `‚Ä¢ **${ing.quantity} ${ing.unit}** ${ing.name}`
  ).join('\n');

  const instructions = recipeData.instructions.map((step: string, i: number) =>
    `${i + 1}. ${step}`
  ).join('\n');

  const info = [
    `${servingsEmoji} **Portions :** ${recipeData.servings}`,
    `${timeEmoji} **Pr√©paration :** ${recipeData.preparationTime} min`,
    `${timeEmoji} **Cuisson :** ${recipeData.cookingTime} min`,
    `${difficultyEmoji[recipeData.difficulty as keyof typeof difficultyEmoji] || 'üìä'} **Difficult√© :** ${recipeData.difficulty}`,
    `${categoryEmoji[recipeData.category as keyof typeof categoryEmoji] || 'üè∑Ô∏è'} **Cat√©gorie :** ${recipeData.category}`
  ].join(' | ');

  return `${title}\n\n${description}\n\n${ingredientsEmoji} **Ingr√©dients :**\n${ingredients}\n\n${instructionsEmoji} **Instructions :**\n${instructions}\n\n---\n${info}`;
}

// Analyser la nutrition d'une recette
router.post('/analyze-nutrition/:recipeId', authenticate, async (req, res, next) => {
  try {
    const recipe = await recipeService.getRecipeById(req.params.recipeId);
    if (!recipe) {
      res.status(404).json({ message: 'Recette non trouv√©e' });
      return;
    }

    // R√©cup√©rer les ingr√©dients de la recette
    const ingredientNames = Array.isArray(recipe.ingredients)
      ? recipe.ingredients.map((ing: any) => typeof ing === 'string' ? ing : ing.name)
      : [];
    const ingredients = await Promise.all(
      ingredientNames.map(async (ingredientName: string) => {
        const ingredient = await ingredientService.getIngredientByName(ingredientName);
        if (!ingredient) {
          throw new Error(`Ingr√©dient non trouv√©: ${ingredientName}`);
        }
        return ingredient;
      })
    );

    // Analyser la nutrition
    const analysis = await groqService.analyzeNutrition(ingredients);

    // Formater l'analyse pour l'affichage
    const formattedAnalysis = `
## üìä **Analyse Nutritionnelle**

**Valeurs nutritionnelles par portion :**
‚Ä¢ **Calories :** ${analysis.totalCalories} kcal
‚Ä¢ **Prot√©ines :** ${analysis.totalProteins} g
‚Ä¢ **Glucides :** ${analysis.totalCarbs} g
‚Ä¢ **Lipides :** ${analysis.totalFats} g

**Vitamines pr√©sentes :**
${analysis.vitamins.map(vitamin => `‚Ä¢ ${vitamin}`).join('\n')}

**Min√©raux pr√©sents :**
${analysis.minerals.map(mineral => `‚Ä¢ ${mineral}`).join('\n')}

**Allerg√®nes d√©tect√©s :**
${analysis.allergens.length > 0 ? analysis.allergens.map(allergen => `‚Ä¢ ${allergen}`).join('\n') : 'Aucun allerg√®ne d√©tect√©'}
    `.trim();

    // Sauvegarder l'analyse dans Airtable
    const savedAnalysis = await nutritionalAnalysisService.createNutritionalAnalysis({
      recipeID: req.params.recipeId,
      ...analysis
    });

    res.json({
      analysis: formattedAnalysis,
      data: savedAnalysis
    });
  } catch (error) {
    next(error);
  }
});

// G√©n√©rer une recette √† partir d'ingr√©dients
router.post('/generate-recipe', authenticate, async (req, res, next) => {
  try {
    const { ingredients } = req.body;
    if (!Array.isArray(ingredients) || ingredients.length === 0) {
      res.status(400).json({ message: 'La liste des ingr√©dients est requise' });
      return;
    }

    // R√©cup√©rer les allergies de l'utilisateur
    const userId = req.user?.id || '';
    const user = await userService.getUserById(userId);
    const userAllergies = user?.allergies || [];

    // R√©cup√©rer les d√©tails des ingr√©dients
    const ingredientDetails = await Promise.all(
      ingredients.map(async (ingredientName: string) => {
        const ingredient = await ingredientService.getIngredientByName(ingredientName);
        if (!ingredient) {
          throw new Error(`Ingr√©dient non trouv√©: ${ingredientName}`);
        }
        return ingredient;
      })
    );

    // G√©n√©rer la recette en tenant compte des allergies
    const generatedRecipe = await groqService.generateRecipe(ingredientDetails, userAllergies);

    // Adapter les ingr√©dients pour respecter le type attendu
    const formattedIngredients = generatedRecipe.ingredients.map((ing, idx) => ({
      id: '',
      name: ing.name,
      quantity: Number(ing.quantity) || 0,
      unit: ing.unit
    }));

    // Sauvegarder la recette dans Airtable
    const savedRecipe = await recipeService.createRecipe({
      ...generatedRecipe,
      ingredients: formattedIngredients,
      instructions: typeof generatedRecipe.instructions === 'string' ? generatedRecipe.instructions.split('\n') : generatedRecipe.instructions,
      authorID: "chef",
      isPublic: true
    });

    res.status(201).json(savedRecipe);
  } catch (error) {
    next(error);
  }
});

router.post('/chat', authenticate, async (req, res) => {
  try {
    const { message, conversationHistory } = req.body;
    const userId = req.user?.id || '';

    // R√©cup√©rer les allergies de l'utilisateur
    const user = await userService.getUserById(userId);
    const userAllergies = user?.allergies || [];

    // Appeler le LLM pour g√©n√©rer une r√©ponse avec les allergies
    const response = await groqService.chat(message, conversationHistory, userAllergies);
    // Si la r√©ponse contient une recette, extraire les informations
    if (response.containsRecipe) {
      const recipeData = response.recipeData;
      // Formater la recette pour l'utilisateur
      const formattedMessage = formatRecipeWithMarkdown(recipeData);
      // Retourner la r√©ponse format√©e + les donn√©es pour le bouton
      return res.json({
        message: formattedMessage,
        containsRecipe: true,
        canCreateRecipe: response.canCreateRecipe || false,
        recipeData: recipeData
      });
    }
    // Sinon, retourner juste la r√©ponse du chat
    return res.json({
      message: response.message,
      containsRecipe: false
    });
  } catch (error) {
    console.error('Error in chat:', error);
    res.status(500).json({ error: 'Erreur lors de la g√©n√©ration de la r√©ponse' });
  }
});

router.post('/create-recipe', authenticate, async (req, res) => {
  try {
    const { recipeData } = req.body;
    const userId = req.user?.id || '';
    // Cr√©er la recette dans Airtable
    const recipe = await recipeService.createRecipe({
      ...recipeData,
      authorID: "chef"
    });
    res.json({ recipe });
  } catch (error) {
    console.error('Error creating recipe:', error);
    res.status(500).json({ error: 'Erreur lors de la cr√©ation de la recette' });
  }
});

// Analyser la nutrition d'une recette (nouvelle route simplifi√©e)
router.post('/analyze-nutrition', authenticate, async (req, res) => {
  try {
    const { recipeName, ingredients } = req.body;
    
    if (!recipeName || !ingredients) {
      res.status(400).json({ error: 'Nom de recette et ingr√©dients requis' });
      return;
    }

    // Utiliser le service Groq pour analyser la nutrition
    const analysis = await groqService.analyzeNutritionText(recipeName, ingredients);
    
    res.json({ analysis });
  } catch (error) {
    console.error('Error in nutrition analysis:', error);
    res.status(500).json({ error: 'Erreur lors de l\'analyse nutritionnelle' });
  }
});

export default router; 