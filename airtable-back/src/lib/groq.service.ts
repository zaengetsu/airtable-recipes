import { Groq } from 'groq-sdk';
import { AirtableIngredient } from '../types/airtable.types';

const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions';

interface NutritionalAnalysis {
  totalCalories: number;
  totalProteins: number;
  totalCarbs: number;
  totalFats: number;
  vitamins: string[];
  minerals: string[];
  allergens: string[];
}

interface GeneratedRecipe {
  name: string;
  description: string;
  ingredients: Array<{
    name: string;
    quantity: string;
    unit: string;
  }>;
  instructions: string;
  servings: number;
  preparationTime: number;
  cookingTime: number;
  difficulty: 'Facile' | 'Moyen' | 'Difficile';
  category: string;
}

export class GroqService {
  private client: Groq;
  private systemPrompt = `Tu es un assistant culinaire expert et bienveillant. Ton r√¥le est d'aider les utilisateurs √† cr√©er des recettes d√©licieuses tout en veillant √† leur s√©curit√© alimentaire.

TON R√îLE :
- R√©pondre de mani√®re naturelle et conversationnelle √† tous types de messages
- Proposer des recettes quand on te le demande
- Aider avec des conseils culinaires
- √ätre un compagnon de cuisine amical et encourageant

QUAND TU D√âTECTES DES ALLERG√àNES :
- Sois empathique et pr√©venant : "Je vois que cette recette contient [allerg√®ne] auquel vous √™tes allergique. Laissez-moi vous proposer une alternative d√©licieuse sans cet ingr√©dient !"
- Propose spontan√©ment des alternatives : "√Ä la place, je peux vous sugg√©rer [alternative] qui donnera un r√©sultat similaire"
- Explique pourquoi l'alternative fonctionne : "Cette substitution garde la m√™me texture/saveur car..."
- Sois rassurant : "Ne vous inqui√©tez pas, il existe plein d'alternatives d√©licieuses !"

TON TON :
- Amical et conversationnel, comme un ami qui cuisine avec vous
- Utilise "je" et "vous" pour cr√©er une connexion personnelle
- Sois encourageant et positif
- Explique vos choix de mani√®re p√©dagogique
- Ajoute des touches d'humour et de personnalit√©
- Utilise des expressions culinaires fran√ßaises
- Sois cr√©atif dans tes descriptions de recettes
- R√©ponds naturellement aux salutations et questions g√©n√©rales

Quand tu proposes une recette, structure-la clairement avec :
- Un titre
- Une liste d'ingr√©dients avec quantit√©s
- Des instructions √©tape par √©tape
- Des informations nutritionnelles si possible

Format de r√©ponse pour une recette :
{
  "containsRecipe": true,
  "canCreateRecipe": true, // ce champ doit √™tre √† true si la recette est compl√®te et peut √™tre cr√©√©e
  "recipeData": {
    "name": "Titre de la recette",
    "description": "Description app√©tissante",
    "ingredients": [
      { "name": "ingr√©dient 1", "quantity": "100", "unit": "g" },
      { "name": "ingr√©dient 2", "quantity": "2", "unit": "pi√®ce" }
    ],
    "instructions": ["√©tape 1", "√©tape 2"],
    "servings": 2,
    "preparationTime": 10,
    "cookingTime": 20,
    "difficulty": "Facile",
    "category": "Plat principal"
  }
}

Si tu n'as pas assez d'informations, propose la recette la plus plausible possible sans insister pour obtenir plus de d√©tails.`;

  constructor() {
    this.client = new Groq({
      apiKey: process.env.GROQ_API_KEY
    });
  }

  async chat(message: string, conversationHistory: any[] = [], userAllergies: string[] = []): Promise<any> {
    try {
      // Construire le prompt avec les allergies de mani√®re plus conversationnelle
      let allergyContext = '';
      if (userAllergies.length > 0) {
        allergyContext = `\n\nINFORMATIONS IMPORTANTES SUR LES ALLERGIES :
        L'utilisateur est allergique aux √©l√©ments suivants : ${userAllergies.join(', ')}.
        
        QUAND TU PROPOSES UNE RECETTE :
        - V√©rifie d'abord si elle contient des allerg√®nes
        - Si oui, explique gentiment le probl√®me et propose imm√©diatement une alternative
        - Sois rassurant et cr√©atif dans tes suggestions
        - Explique pourquoi ton alternative fonctionne bien
        - Utilise un ton amical et pr√©venant
        
        Exemples de r√©ponses :
        "Oh, je vois que cette recette contient des noix ! Comme vous y √™tes allergique, laissez-moi vous proposer une version avec des graines de tournesol √† la place. Elles apportent le m√™me croquant et sont d√©licieuses !"
        
        "Cette recette utilise du lait, mais je peux facilement l'adapter avec du lait d'amande ou d'avoine. Le r√©sultat sera tout aussi cr√©meux et d√©licieux !"`;
      }
      
      // D√©tecter le type de message et adapter la r√©ponse
      const trimmedMessage = message.trim().toLowerCase();
      const isGreeting = /^(bonjour|hello|salut|hi|hey|coucou|bonsoir|yo|ciao|hola)/i.test(trimmedMessage);
      const isRecipeRequest = /recette|cuisiner|pr√©parer|faire|cr√©er|g√¢teau|plat|dessert|entr√©e|manger|cuisine/i.test(trimmedMessage);
      
      let userPrompt;
      let shouldGenerateRecipe = false;
      
      if (isGreeting) {
        userPrompt = `L'utilisateur a dit "${message}". 

R√©ponds de mani√®re naturelle et amicale √† cette salutation. Pr√©sente-toi comme un assistant culinaire et propose tes services de mani√®re engageante. N'utilise PAS le format de recette JSON, juste une r√©ponse conversationnelle.`;
        shouldGenerateRecipe = false;
      } else if (isRecipeRequest) {
        userPrompt = `Donne-moi une recette de ${message}.${allergyContext}

FORMAT DE R√âPONSE POUR UNE RECETTE :
- Utilise du markdown avec des emojis et une mise en forme attrayante
- Ajoute des conseils culinaires et des astuces
- Inclus des variantes ou suggestions d'am√©lioration
- Sois cr√©atif dans la description et les instructions
- Ajoute des notes sur les temps de repos, la conservation, etc.

Exemple de format :
## üéØ **Nom de la recette**
*Description app√©tissante*

ü•ò **Ingr√©dients :**

| Quantit√© | Unit√© | Ingr√©dient |
|----------|-------|------------|
| 200 | g | Farine |
| 2 | unit√©s | ≈íufs |
| 150 | ml | Lait |

üìù **Instructions :**
1. √âtape d√©taill√©e
...

üí° **Conseils et astuces :**
- Conseil 1
- Conseil 2

üîÑ **Variantes :**
- Variante 1
- Variante 2

Si tu d√©tectes des allerg√®nes, explique gentiment et propose des alternatives.`;
        shouldGenerateRecipe = true;
      } else {
        userPrompt = `L'utilisateur a dit : "${message}". 

R√©ponds de mani√®re naturelle et conversationnelle. Si c'est une demande de recette, propose une recette. Si c'est une question g√©n√©rale sur la cuisine, aide-le. Si c'est juste une conversation, sois amical et engageant.${allergyContext}`;
        shouldGenerateRecipe = false;
      }
      
      const messagesText = [
        { role: 'system', content: this.systemPrompt + allergyContext },
        ...conversationHistory,
        { role: 'user', content: userPrompt }
      ];
      
      // Premier appel : r√©ponse conversationnelle en markdown
      const completionText = await this.client.chat.completions.create({
        messages: messagesText,
        model: 'llama3-70b-8192',
        temperature: 0.8, // Augment√© pour plus de cr√©ativit√© conversationnelle
        max_tokens: 1500, // Augment√© pour les recettes d√©taill√©es
      });
      const userMessage = completionText.choices[0].message.content;

      // Deuxi√®me appel : JSON structur√© seulement si c'est une demande de recette
      let recipeData = null;
      let canCreateRecipe = false;
      
      if (shouldGenerateRecipe && userMessage) {
                // Extraire les informations de la recette depuis la r√©ponse markdown
        const recipeNameMatch = userMessage.match(/## üéØ \*\*(.*?)\*\*/);
        const ingredientsMatch = userMessage.match(/ü•ò \*\*Ingr√©dients :\*\*\n([\s\S]*?)(?=\n\n|üìù)/);
        const instructionsMatch = userMessage.match(/üìù \*\*Instructions :\*\*\n([\s\S]*?)(?=\n\n|üí°|üîÑ|$)/);
        
        if (recipeNameMatch && ingredientsMatch && instructionsMatch) {
          const name = recipeNameMatch[1];
          const ingredientsText = ingredientsMatch[1];
          const instructionsText = instructionsMatch[1];
          
          // Parser les ingr√©dients depuis le tableau
          const ingredients = ingredientsText
            .split('\n')
            .filter(line => line.includes('|') && !line.includes('---'))
            .map(line => {
              const columns = line.split('|').map(col => col.trim()).filter(Boolean);
              if (columns.length >= 3) {
                return {
                  quantity: columns[0],
                  unit: columns[1],
                  name: columns[2]
                };
              }
              return null;
            })
            .filter(Boolean);
          
          // Parser les instructions
          const instructions = instructionsText
            .split('\n')
            .filter(line => /^\d+\./.test(line.trim()))
            .map(line => line.replace(/^\d+\.\s*/, '').trim())
            .filter(Boolean);
          
          if (ingredients.length > 0 && instructions.length > 0) {
            recipeData = {
              name,
              description: "Recette g√©n√©r√©e par l'assistant",
              ingredients,
              instructions,
              servings: 4,
              preparationTime: 15,
              cookingTime: 20,
              difficulty: "Facile",
              category: "Plat principal"
            };
            canCreateRecipe = true;
          }
        }
      }

      return {
        message: userMessage,
        containsRecipe: !!recipeData,
        canCreateRecipe,
        recipeData
      };
    } catch (error) {
      console.error('Error in Groq chat:', error);
      throw error;
    }
  }

  async analyzeNutrition(ingredients: AirtableIngredient[]): Promise<NutritionalAnalysis> {
    const prompt = `Analysez les valeurs nutritionnelles suivantes et fournissez une analyse d√©taill√©e au format JSON:
    ${JSON.stringify(ingredients, null, 2)}
    
    R√©pondez uniquement avec un objet JSON contenant:
    {
      "totalCalories": number,
      "totalProteins": number,
      "totalCarbs": number,
      "totalFats": number,
      "vitamins": string[],
      "minerals": string[],
      "allergens": string[]
    }`;

    try {
      const completion = await this.client.chat.completions.create({
        model: 'llama3-70b-8192',
        messages: [
          {
            role: 'system',
            content: 'Vous √™tes un expert en nutrition qui analyse les ingr√©dients et fournit des informations nutritionnelles pr√©cises.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 1000
      });

      const content = completion.choices[0].message.content;
      if (!content) {
        throw new Error('R√©ponse vide de l\'API');
      }

      return JSON.parse(content);
    } catch (error) {
      console.error('Erreur lors de l\'analyse nutritionnelle:', error);
      throw new Error('Erreur lors de l\'analyse nutritionnelle');
    }
  }

  async analyzeNutritionText(recipeName: string, ingredients: string): Promise<string> {
    const prompt = `Analysez les valeurs nutritionnelles de cette recette et fournissez une analyse d√©taill√©e au format markdown :

**Recette :** ${recipeName}
**Ingr√©dients :** ${ingredients}

Fournissez une analyse compl√®te et d√©taill√©e avec :

## üìä **Valeurs nutritionnelles estim√©es**
- Calories totales
- Prot√©ines (g)
- Glucides (g)
- Lipides (g)
- Fibres (g)

## ü•¨ **Vitamines et min√©raux pr√©sents**
- Liste des vitamines principales
- Min√©raux importants

## ‚ö†Ô∏è **Allerg√®nes potentiels**
- Identification des allerg√®nes courants

## üí° **Conseils nutritionnels**
- Points positifs de la recette
- Suggestions d'am√©lioration
- Pour qui cette recette convient

Format de r√©ponse en markdown avec emojis, titres en gras, et mise en forme claire et professionnelle.`;

    try {
      const completion = await this.client.chat.completions.create({
        model: 'llama3-70b-8192',
        messages: [
          {
            role: 'system',
            content: 'Vous √™tes un expert en nutrition qui analyse les ingr√©dients et fournit des informations nutritionnelles pr√©cises et d√©taill√©es.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 1000
      });

      const content = completion.choices[0].message.content;
      if (!content) {
        throw new Error('R√©ponse vide de l\'API');
      }

      return content;
    } catch (error) {
      console.error('Erreur lors de l\'analyse nutritionnelle:', error);
      throw new Error('Erreur lors de l\'analyse nutritionnelle');
    }
  }

  async generateRecipe(ingredients: AirtableIngredient[], userAllergies: string[] = []): Promise<GeneratedRecipe> {
    let allergyContext = '';
    if (userAllergies.length > 0) {
      allergyContext = `\n\nATTENTION ALLERGIES : L'utilisateur est allergique aux √©l√©ments suivants : ${userAllergies.join(', ')}. 
      Si la recette contient des allerg√®nes, proposez automatiquement des alternatives appropri√©es dans les ingr√©dients. 
      Par exemple, remplacez le lait par du lait d'amande, les noix par des graines, etc.`;
    }

    const prompt = `En tant que chef cuisinier professionnel et bienveillant, cr√©ez une recette d√©taill√©e et savoureuse en utilisant les ingr√©dients suivants:
    ${JSON.stringify(ingredients, null, 2)}${allergyContext}

    Instructions sp√©cifiques:
    1. Cr√©ez une recette qui met en valeur les ingr√©dients fournis tout en les compl√©tant avec des ingr√©dients de base courants (sel, poivre, huile, etc.)
    2. Assurez-vous que les quantit√©s sont r√©alistes et proportionnelles
    3. Les instructions doivent √™tre claires, pr√©cises et dans l'ordre chronologique
    4. La difficult√© doit √™tre adapt√©e √† la complexit√© r√©elle de la recette
    5. La cat√©gorie doit √™tre pertinente (ex: "Plat principal", "Entr√©e", "Dessert", etc.)
    6. Le temps de pr√©paration et de cuisson doivent √™tre r√©alistes
    7. La description doit √™tre attrayante et donner envie de cuisiner
    8. Si des allerg√®nes sont d√©tect√©s, proposez automatiquement des alternatives appropri√©es

    R√©pondez UNIQUEMENT avec un objet JSON contenant:
    {
      "name": string, // Nom cr√©atif et attrayant de la recette
      "description": string, // Description d√©taill√©e et app√©tissante
      "ingredients": Array<{
        name: string, // Nom de l'ingr√©dient (avec alternatives si allerg√®nes)
        quantity: string, // Quantit√© pr√©cise
        unit: string // Unit√© de mesure (g, ml, cuill√®re √† soupe, etc.)
      }>,
      "instructions": string, // Instructions d√©taill√©es, une par ligne
      "servings": number, // Nombre de portions
      "preparationTime": number, // Temps de pr√©paration en minutes
      "cookingTime": number, // Temps de cuisson en minutes
      "difficulty": "Facile" | "Moyen" | "Difficile", // Niveau de difficult√©
      "category": string // Cat√©gorie de la recette
    }`;

    const response = await fetch(GROQ_API_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.GROQ_API_KEY}`
      },
      body: JSON.stringify({
        model: 'llama3-70b-8192',
        messages: [
          {
            role: 'system',
            content: 'Vous √™tes un chef cuisinier professionnel avec une expertise en gastronomie fran√ßaise et internationale. Vous cr√©ez des recettes d√©taill√©es, savoureuses et accessibles, en veillant √† ce que chaque √©tape soit claire et pr√©cise. Vous avez une connaissance approfondie des techniques culinaires et des associations de saveurs.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 2000
      })
    });

    if (!response.ok) {
      throw new Error('Erreur lors de la g√©n√©ration de la recette');
    }

    const data = await response.json();
    return JSON.parse(data.choices[0].message.content);
  }
} 